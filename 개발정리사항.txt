* 강의 내용
    - Vuex
    - Vue-Router
    - Axios
    - Dragula 

* 구현 사항
    - 인증 : 로그인, 로그아웃
    - 보드 작업 : 보드, 리스트, 카드  생성, 조회, 수정(타이틀 색상), 이동, 삭제
        - 보드     : 생성, 조회, 수정(타이틀, 색상), 이동, 삭제
        - 리스트   : 생성, 수정(타이틀), 이동, 삭제
        - 카드     : 생성, 조회, 수정(타이틀, 설명), 이동, 삭제

* 기본 플로우
    - 홈페이지 접속 
    - 로그인 페이지(성공) 
    - 홈페이지 리다이렉트 
    - 보드 목록 조회 
    - 보드 생성 
    - 보드 조회(Todo, Doing, Done)
    - 카드 생성 
    - 카드 상세 조회(Modal)
        - 카드 수정
    - 카드 이동
    - 카드 삭제
    - 우측 사이드바에서 보드 세팅 : 색상 변경
    - 보드 삭제 -> 홈으로 이동

* 추가 기능
    - 보드 수정 : 색상 변경, 타이틀 변경
    - 리스트 생성 
    - 리스트 수정 : 타이틀 변경
    - 리스트 이동
    - 리스트 삭제

* 코드 스캐폴딩
    - npm install -g vue-cli  => npm 인스톨 및 vue-cli 설치
    - vue init webpack-simple => 프로젝트 생성
    - 생성 후 npm i 혹은 npm install로 실행을 하면 기본적으로 설정된 라이브러리들을 다운로드 받는다.
    - npm run dev로 실행을 한 후 http://localhost:8080/ 로 접속을 하면 화면이 뜨게 되어 있다.

* router
    - 서버라우팅        -> 매번 주소를 요청할 때마다 갱신(ex: 네이버, 구글)
    - 브라우져 라우팅   -> 매번 주소를 요청할 때마다 갱신되지 않고 데이터를 받아서 갱신하는 방법(ex: 구글메일, 트렐로)

** 라우팅이란
    - 어떤 네트워크 안에서 통신 데이터를 보낼 경로를 선택하는 과정이다.

* vue-router를 사용하는 방법
    - npm i vue-router --save-dev

* 소스 구현 하면서 나온 현상
    - /#/이 붙어서 http://localhost:8080/login/ 으로 다시 접속을 하여도 http://localhost:8080/login#/ 이라고 변경이 되고 정상적으로 동작이 되지 않았음.
        - http://localhost:8080/#/login으로 들어가야 했다.
    - # 가 붙는 현상은 hash mode로 인한 것으로 이 부분은 url을 별도로 저장을 하지 않는 부분에서 일어난 현상으로 vue-router의 기본 모드는 hash mode를 사용한다.
      URL 해시를 사용하여 전체 URL을 시뮬레이트하므로 URL이 변경될 때 페이지가 다시 로드 되지 않습니다.
    - 해시를 제거하기 위해서는 우터의 history 모드 를 사용하면 해결이 된다.
        //라우터 사용
        const router = new VueRouter({
            mode: 'history',
            ......
        })

** port가 충돌이 나는 상황을 방지하기 위해 port 번호를 변경하는 방법
    - 아래와 같이 npm run dev를 설정하는 부분에서 마지막 사항에 --port 3000으로 변경을 하면 localhost:3000으로 변경이 된다.
    - 아래에서
        "scripts": {
            "dev": "cross-env NODE_ENV=development webpack-dev-server --open --hot --port 3000",
            "build": "cross-env NODE_ENV=production webpack --progress --hide-modules"
        }

** router 인스턴스를 새로 생성을 하는 부분
    - 특정 폴더 안에 새로이 index.js 를 생성하고 vue router 관련 사항들을 옮긴다.
    - 작업 후 다른 js에서 router를 사용하기 위해서는 index.js에 export default router 라고 선언을 해준다.
    - 해당 라우터를 사용할 js에서는 import router from './router' 만 선언해주면 아래의 js를 호출해온다.

* router-link란?
    - 일반적인 a:link 를 사용하는 경우 클릭할 때마다 location 이동이 일어나면서 라이브러리들을 다시 불러오도록 되어 있다.
    - router-link는 사용자 네비게이션을 가능하게 해주는 컴포넌트 이다.
    - router-link가 a:link보다 선호 되는 이유는 아래와 같다.
        - 1) Html5 히스토리 모드와 해시모드에서 모두 동일한 방식으로 작동한다. 모드에 따른 코드 수정이 필요 없다.
        - 2) 히스토리 모드에서 router-link는 클릭 이벤트를 차단하여 location이동을 방지할 수 있다.(흔히 클라이언트가 말하는 화면의 깜빡거림)

* 동적 라우팅을 이용하려는 경우에는 아래와 같이 설정을 하면 된다.
    - {path : '/b/:bid', component : Board},
    - path 에서 /:bid 라고 하는 부분에 /: 을 이용하면 뒤에 오는 board id를 매핑 할 수 있다.
    - http://localhost:3000/b 로 접속을 하면 NotFound쪽으로 진입을 한다. 

* 동적 라우팅에서 값을 가져오는 방법
    - export default {
         created(){
             console.log(this.$route) 
         }
      }
    - this.$route 를 사용하면 hash, query, path, parameter 까지 가져올 수 있다.

* 중첩라우팅
    -  아래와 같이 특정 route 경로안에 children 으로 선언 후 배열로 path를 추가 설정을 해준다.
        {path : '/b/:bid', component : Board, children:[
          {path: 'c/:cid', component: Card}
        ]},
    - 이렇게만 설정을 하게되면 Board.vue에서 card.vue 파일이 나오지 않는다.
      해당 vue 파일이 렌더링 될 위치를 설정해주어야 하고, 우선적으로 router-view를 선언한다.
    - 아래와 같이 설정을 하면 처음에는 created 시점에 설정한 것처럼 잘 이동을 하지만, /c/1에서 /c/2로 가면 cid가 안 바뀐다.
        <router-link to="/b/${bid}/c/1">Card1</router-link>
        <router-link to="/b/${bid}/c/2">Card2</router-link>
    - 그래서 라우트가 변경되는 것을 확인 하기 위해 watch 라는 것을 이용하여 route를 감시할 수 있다.

* watch 에서 $route를 확인함에 있어 방법은 아래의 두가지를 사용할 수 있다.
    - '$route'() 처럼 메소드 형태로 사용이 가능하다.
        watch:{
            '$route'(){
                this.cid = this.$route.params.cid
                this.fetchData()
            }
        }
    - 아래 처럼 객체화 시켜서 사용이 가능하며, immediate라고 사용을 하면 즉시 실행이 된다. 이에 따라 created가 필요가 없어진다.
        $route:{
            handler:'fetchData',
            immediate : true     //바로 실행하는 방법이므로 아래의 created와 중복이 된다.
        }